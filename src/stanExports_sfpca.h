// Generated by rstantools.  Do not edit by hand.

/*
    BayesTime is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesTime is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesTime.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_sfpca_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sfpca");
    reader.add_event(65, 63, "end", "model_sfpca");
    return reader;
}
#include <stan_meta_header.hpp>
class model_sfpca : public prob_grad {
private:
        int N;
        int K;
        int Q;
        int cov_size;
        std::vector<int> V;
        std::vector<int> subject_starts;
        std::vector<int> subject_stops;
        std::vector<int> cov_starts;
        std::vector<int> cov_stops;
        vector_d Y;
        matrix_d B;
        vector_d zero_k;
        vector_d zero_q;
        vector_d zero_v;
public:
    model_sfpca(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sfpca(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sfpca_namespace::model_sfpca";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            check_greater_or_equal(function__, "Q", Q, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "cov_size", "int", context__.to_vec());
            cov_size = int(0);
            vals_i__ = context__.vals_i("cov_size");
            pos__ = 0;
            cov_size = vals_i__[pos__++];
            check_greater_or_equal(function__, "cov_size", cov_size, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("V", "N", N);
            context__.validate_dims("data initialization", "V", "int", context__.to_vec(N));
            V = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("V");
            pos__ = 0;
            size_t V_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < V_k_0_max__; ++k_0__) {
                V[k_0__] = vals_i__[pos__++];
            }
            size_t V_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < V_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "V[i_0__]", V[i_0__], 1);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("subject_starts", "N", N);
            context__.validate_dims("data initialization", "subject_starts", "int", context__.to_vec(N));
            subject_starts = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("subject_starts");
            pos__ = 0;
            size_t subject_starts_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < subject_starts_k_0_max__; ++k_0__) {
                subject_starts[k_0__] = vals_i__[pos__++];
            }
            size_t subject_starts_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < subject_starts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_starts[i_0__]", subject_starts[i_0__], 1);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("subject_stops", "N", N);
            context__.validate_dims("data initialization", "subject_stops", "int", context__.to_vec(N));
            subject_stops = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("subject_stops");
            pos__ = 0;
            size_t subject_stops_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < subject_stops_k_0_max__; ++k_0__) {
                subject_stops[k_0__] = vals_i__[pos__++];
            }
            size_t subject_stops_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < subject_stops_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_stops[i_0__]", subject_stops[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("cov_starts", "N", N);
            context__.validate_dims("data initialization", "cov_starts", "int", context__.to_vec(N));
            cov_starts = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("cov_starts");
            pos__ = 0;
            size_t cov_starts_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < cov_starts_k_0_max__; ++k_0__) {
                cov_starts[k_0__] = vals_i__[pos__++];
            }
            size_t cov_starts_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < cov_starts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cov_starts[i_0__]", cov_starts[i_0__], 1);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("cov_stops", "N", N);
            context__.validate_dims("data initialization", "cov_stops", "int", context__.to_vec(N));
            cov_stops = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("cov_stops");
            pos__ = 0;
            size_t cov_stops_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < cov_stops_k_0_max__; ++k_0__) {
                cov_stops[k_0__] = vals_i__[pos__++];
            }
            size_t cov_stops_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < cov_stops_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cov_stops[i_0__]", cov_stops[i_0__], 1);
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("Y", "sum(V)", sum(V));
            context__.validate_dims("data initialization", "Y", "vector_d", context__.to_vec(sum(V)));
            Y = Eigen::Matrix<double, Eigen::Dynamic, 1>(sum(V));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_1_max__ = sum(V);
            for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                Y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("B", "sum(V)", sum(V));
            validate_non_negative_index("B", "Q", Q);
            context__.validate_dims("data initialization", "B", "matrix_d", context__.to_vec(sum(V),Q));
            B = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(sum(V), Q);
            vals_r__ = context__.vals_r("B");
            pos__ = 0;
            size_t B_j_2_max__ = Q;
            size_t B_j_1_max__ = sum(V);
            for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                    B(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 17;
            validate_non_negative_index("zero_k", "K", K);
            zero_k = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(zero_k, DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("zero_q", "Q", Q);
            zero_q = Eigen::Matrix<double, Eigen::Dynamic, 1>(Q);
            stan::math::fill(zero_q, DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("zero_v", "sum(V)", sum(V));
            zero_v = Eigen::Matrix<double, Eigen::Dynamic, 1>(sum(V));
            stan::math::fill(zero_v, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 20;
            stan::math::assign(zero_k, rep_vector(0, K));
            current_statement_begin__ = 21;
            stan::math::assign(zero_q, rep_vector(0, Q));
            current_statement_begin__ = 22;
            stan::math::assign(zero_v, rep_vector(0, sum(V)));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 25;
            validate_non_negative_index("alpha", "K", K);
            validate_non_negative_index("alpha", "N", N);
            num_params_r__ += (K * N);
            current_statement_begin__ = 26;
            validate_non_negative_index("Theta", "Q", Q);
            validate_non_negative_index("Theta", "K", K);
            num_params_r__ += (Q * K);
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            validate_non_negative_index("theta_mu", "Q", Q);
            num_params_r__ += Q;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sfpca() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 25;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "K", K);
        validate_non_negative_index("alpha", "N", N);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(N,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t alpha_j_1_max__ = K;
        size_t alpha_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                alpha[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t alpha_i_0_max__ = N;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("Theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Theta");
        pos__ = 0U;
        validate_non_negative_index("Theta", "Q", Q);
        validate_non_negative_index("Theta", "K", K);
        context__.validate_dims("parameter initialization", "Theta", "matrix_d", context__.to_vec(Q,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Theta(Q, K);
        size_t Theta_j_2_max__ = K;
        size_t Theta_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                Theta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("sigma_eps")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_eps missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_eps");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_eps", "double", context__.to_vec());
        double sigma_eps(0);
        sigma_eps = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_eps);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_eps: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("theta_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_mu");
        pos__ = 0U;
        validate_non_negative_index("theta_mu", "Q", Q);
        context__.validate_dims("parameter initialization", "theta_mu", "vector_d", context__.to_vec(Q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_mu(Q);
        size_t theta_mu_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < theta_mu_j_1_max__; ++j_1__) {
            theta_mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 25;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > alpha;
            size_t alpha_d_0_max__ = N;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.vector_constrain(K, lp__));
                else
                    alpha.push_back(in__.vector_constrain(K));
            }
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Theta;
            (void) Theta;  // dummy to suppress unused var warning
            if (jacobian__)
                Theta = in__.matrix_constrain(Q, K, lp__);
            else
                Theta = in__.matrix_constrain(Q, K);
            current_statement_begin__ = 27;
            local_scalar_t__ sigma_eps;
            (void) sigma_eps;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_eps = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_eps = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 28;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_mu;
            (void) theta_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_mu = in__.vector_constrain(Q, lp__);
            else
                theta_mu = in__.vector_constrain(Q);
            // model body
            current_statement_begin__ = 31;
            lp_accum__.add(cauchy_log<propto__>(sigma_eps, 0, 1));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(theta_mu, 0, 1));
            current_statement_begin__ = 34;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 35;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "Theta"), 0, 1));
            }
            current_statement_begin__ = 39;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 40;
                lp_accum__.add(multi_normal_log<propto__>(get_base1(alpha, n, "alpha", 1), zero_k, diag_matrix(rep_vector(1, K))));
                current_statement_begin__ = 41;
                lp_accum__.add(multi_normal_log<propto__>(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "Y"), add(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), theta_mu), multiply(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), Theta), get_base1(alpha, n, "alpha", 1))), diag_matrix(rep_vector(pow(sigma_eps, 2), get_base1(V, n, "V", 1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("Theta");
        names__.push_back("sigma_eps");
        names__.push_back("theta_mu");
        names__.push_back("Sigma");
        names__.push_back("W");
        names__.push_back("log_lik_marg");
        names__.push_back("log_lik");
        names__.push_back("Ynew");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(cov_size);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(V));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sfpca_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha;
        size_t alpha_d_0_max__ = N;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.vector_constrain(K));
        }
        size_t alpha_j_1_max__ = K;
        size_t alpha_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                vars__.push_back(alpha[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Theta = in__.matrix_constrain(Q, K);
        size_t Theta_j_2_max__ = K;
        size_t Theta_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                vars__.push_back(Theta(j_1__, j_2__));
            }
        }
        double sigma_eps = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_eps);
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta_mu = in__.vector_constrain(Q);
        size_t theta_mu_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < theta_mu_j_1_max__; ++j_1__) {
            vars__.push_back(theta_mu(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 46;
            validate_non_negative_index("Sigma", "cov_size", cov_size);
            Eigen::Matrix<double, Eigen::Dynamic, 1> Sigma(cov_size);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("W", "Q", Q);
            validate_non_negative_index("W", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> W(Q, Q);
            stan::math::initialize(W, DUMMY_VAR__);
            stan::math::fill(W, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("log_lik_marg", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_marg(N);
            stan::math::initialize(log_lik_marg, DUMMY_VAR__);
            stan::math::fill(log_lik_marg, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("Ynew", "sum(V)", sum(V));
            Eigen::Matrix<double, Eigen::Dynamic, 1> Ynew(sum(V));
            stan::math::initialize(Ynew, DUMMY_VAR__);
            stan::math::fill(Ynew, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 52;
            stan::math::assign(W, multiply(Theta, transpose(Theta)));
            current_statement_begin__ = 53;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 54;
                stan::model::assign(Sigma, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(cov_starts, n, "cov_starts", 1), get_base1(cov_stops, n, "cov_stops", 1)), stan::model::nil_index_list()), 
                            to_vector(add(multiply(multiply(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), Theta), transpose(Theta)), transpose(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"))), diag_matrix(rep_vector(pow(sigma_eps, 2), get_base1(V, n, "V", 1))))), 
                            "assigning variable Sigma");
                current_statement_begin__ = 56;
                stan::model::assign(log_lik_marg, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            multi_normal_log(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "Y"), stan::model::rvalue(zero_v, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "zero_v"), to_matrix(stan::model::rvalue(Sigma, stan::model::cons_list(stan::model::index_min_max(get_base1(cov_starts, n, "cov_starts", 1), get_base1(cov_stops, n, "cov_stops", 1)), stan::model::nil_index_list()), "Sigma"), get_base1(V, n, "V", 1), get_base1(V, n, "V", 1))), 
                            "assigning variable log_lik_marg");
                current_statement_begin__ = 58;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            multi_normal_log(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "Y"), add(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), theta_mu), multiply(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), Theta), get_base1(alpha, n, "alpha", 1))), diag_matrix(rep_vector(pow(sigma_eps, 2), get_base1(V, n, "V", 1)))), 
                            "assigning variable log_lik");
                current_statement_begin__ = 60;
                stan::model::assign(Ynew, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), 
                            multi_normal_rng(add(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), theta_mu), multiply(multiply(stan::model::rvalue(B, stan::model::cons_list(stan::model::index_min_max(get_base1(subject_starts, n, "subject_starts", 1), get_base1(subject_stops, n, "subject_stops", 1)), stan::model::nil_index_list()), "B"), Theta), get_base1(alpha, n, "alpha", 1))), diag_matrix(rep_vector(pow(sigma_eps, 2), get_base1(V, n, "V", 1))), base_rng__), 
                            "assigning variable Ynew");
            }
            // validate, write generated quantities
            current_statement_begin__ = 46;
            size_t Sigma_j_1_max__ = cov_size;
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                vars__.push_back(Sigma(j_1__));
            }
            current_statement_begin__ = 47;
            size_t W_j_2_max__ = Q;
            size_t W_j_1_max__ = Q;
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    vars__.push_back(W(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 48;
            size_t log_lik_marg_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_marg_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_marg(j_1__));
            }
            current_statement_begin__ = 49;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 50;
            size_t Ynew_j_1_max__ = sum(V);
            for (size_t j_1__ = 0; j_1__ < Ynew_j_1_max__; ++j_1__) {
                vars__.push_back(Ynew(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_sfpca";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = K;
        size_t alpha_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Theta_j_2_max__ = K;
        size_t Theta_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_eps";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_mu_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < theta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t Sigma_j_1_max__ = cov_size;
        for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t W_j_2_max__ = Q;
        size_t W_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "W" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_marg_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_marg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_marg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Ynew_j_1_max__ = sum(V);
        for (size_t j_1__ = 0; j_1__ < Ynew_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ynew" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = K;
        size_t alpha_k_0_max__ = N;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Theta_j_2_max__ = K;
        size_t Theta_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_eps";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_mu_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < theta_mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t Sigma_j_1_max__ = cov_size;
        for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t W_j_2_max__ = Q;
        size_t W_j_1_max__ = Q;
        for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "W" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_marg_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_marg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_marg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Ynew_j_1_max__ = sum(V);
        for (size_t j_1__ = 0; j_1__ < Ynew_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Ynew" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_sfpca_namespace::model_sfpca stan_model;
#endif
