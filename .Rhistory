d <- model$knot
if (is.null(x_lab)) x_lab = 'time'
if (is.null(y_lab)) y_lab = 'standardized response'
print(bayesplot::ppc_dens_overlay(sfpca_data$data$response, Ynew_transform) +
ggplot2::ggtitle('posterior predictive checking')) +
labs(x = )
print(bayesplot::ppc_dens_overlay(sfpca_data$data$response, Ynew_transform) +
ggplot2::ggtitle('posterior predictive checking')) +
labs(x = x_lab, y = y_lab)
#library(devtools)
#install_github('biocore/bayestime')
install_github('y1zhong/bayestime')
library(devtools)
library(devtools)
install_github('biocore/bayestime')
usethis::use_package('reshape')
devtools::load_all(".")
data("ECAM")
colnames(ECAM)
time <- 'month_of_life'
response <- 'shannon'
ECAM <- ECAM[!duplicated(ECAM[, c('studyid', 'month_of_life')]), ]
#stan_results <- stan_fit(sfpca_data = dat, Nsamples = 1000, Nchain = 3,
#                        Ncores=2, PC_range = c(2,3), nknot_range = c(2,3))
#save(stan_results, file='~/Dropbox/lab/SFPCA/results_pkg/stan_ECAM.RData')
load('~/Dropbox/lab/SFPCA/results_pkg/stan_ECAM.RData')
optimal_model_idx <- optimal(model_list = stan_results)
optimal_model <- stan_results[[optimal_model_idx]]
model_output <- output_results(sfpca_data = dat, model = optimal_model)
plot_fpc_curve(output = model_output, pc_idx = c(1,2,3), original = T)
fpc_on_mean_curve_data2 <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 2, original = F, sd = T)
fpc_on_mean_curve_data2 <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 2, original = F, sd = T)
fpc_on_mean_curve_data <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 1, original = T, sd = F)
model_output <- output_results(sfpca_data = dat, model = optimal_model)
dat <- prepare_data(data = ECAM, unique_subject_id = unique_subject_id, time_name = time,
response_name = response, transform_y = 'standardize', scale_time = T)
unique_subject_id <- 'studyid'
time <- 'month_of_life'
response <- 'shannon'
dat <- prepare_data(data = ECAM, unique_subject_id = unique_subject_id, time_name = time,
response_name = response, transform_y = 'standardize', scale_time = T)
model_output <- output_results(sfpca_data = dat, model = optimal_model)
plot_fpc_curve(output = model_output, pc_idx = c(1,2,3), original = T)
fpc_on_mean_curve_data <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 1, original = T, sd = F)
fpc_on_mean_curve_data2 <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 2, original = F, sd = T)
boxplot_data <- plot_fpc_boxplot(output = model_output, pc_idx = 1,
group_name = 'diet_3', testing_type = 'parametric',
pairwise_testing = F, global_testing = F,
group_order = c('eb', 'fd', 'bd'))
plot_posterior_diagnostic(sfpca_data = dat, model = optimal_model)
sfpca_data=dat
model = optimal_model
sa <- model$sa
Nsamples <- model$Nsamples
Nchains <- model$Nchains
Ynew <- rstan::extract(sa, "Ynew", permuted = FALSE)
V <- sfpca_data$visits.vector
Ynew_transform <- matrix(rep(0, Nsamples / 2 * Nchains * sum(V)),
ncol = sum(V))
ind <- 0
for (i in 1:(Nsamples / 2)) {
for (j in 1:Nchains) {
ind <- ind + 1
Ynew_transform[ind, ] <- Ynew[i, j, ]
}
}
Ynew_mean <- colMeans(Ynew_transform)
bayesplot::color_scheme_set("brightblue")
k <- model$pc
d <- model$knot
print(bayesplot::ppc_dens_overlay(sfpca_data$data$response, Ynew_transform) +
ggplot2::ggtitle('posterior predictive checking')) +
theme(plot.title = element_text(hjust = 0.5))+
labs(x = x_lab, y = y_lab)
results=list('data'=plot_data)
data <- output$df
K <- output$rotation$npcs
if (original == TRUE){
response <- data$response_ori
time <- data$time_ori
} else {
response <- data$response
time <- data$time
if (all(data$response == data$response_ori) &
all(data$time == data$time_ori)){
print('Warning: Response and time are not transformed.
Plot with original values')
}
}
sigma_y <- sd(response)
data <- output$df
output=model_output
data <- output$df
K <- output$rotation$npcs
original = FALSE
if (original == TRUE){
response <- data$response_ori
time <- data$time_ori
} else {
response <- data$response
time <- data$time
if (all(data$response == data$response_ori) &
all(data$time == data$time_ori)){
print('Warning: Response and time are not transformed.
Plot with original values')
}
}
sigma_y <- sd(response)
mu_y <- mean(response)
time_cont <- output$basis$time_cont
Y_sparse <- output$Y_sparse
Mu_functions <- output$Mu_functions
time_sparse <- output$time_sparse
FPC_mean <- output$FPC_mean
prop_var_avg <- output$rotation$prop_var_avg
if (is.null(ymin)) {
ymin <- floor(min(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) - 0.1 }
if (is.null(ymax)) {
ymax <- ceiling(max(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) + 0.1 }
if (is.null(x_lab)) x_lab = 'time'
if (is.null(y_lab)) y_lab = 'response'
k <- pc_idx
fpcs <- paste('fpc', k, sep = '')
pc_idx=3
k <- pc_idx
fpcs <- paste('fpc', k, sep = '')
data_temp <- data[, c('ID', group_name, fpcs)]
classes <- levels(data_temp[, group_name])
groups <- length(classes)
group_name='diet_#'
group_name='diet_3'
k <- pc_idx
fpcs <- paste('fpc', k, sep = '')
data_temp <- data[, c('ID', group_name, fpcs)]
classes <- levels(data_temp[, group_name])
groups <- length(classes)
scores_mu_g <- unlist(lapply(1:groups, function(x){
mean(data_temp[data_temp[, group_name] == classes[x], fpcs])
}))
plot_data <- data.frame(time_cont * max(time))
colnames(plot_data) <- 'time'
for (j in 1:groups){
plot_data[, 1 + j] <- (Mu_functions + FPC_mean[, k] * scores_mu_g[j]) *
sigma_y + mu_y
colnames(plot_data)[1 + j] <- classes[j]
}
plot_melt <- reshape::melt(plot_data, time, classes)
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
theme_classic() +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
x_lab = 'time'
y_lab = 'response'
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
theme_classic() +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
results=list('data'=plot_data)
# print(ggplot() +
#         geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
#         theme_classic() +
#         labs(title= paste(paste('PC', k, sep = ' '),
#                           ' (', prop_var_avg[k], ' )', sep=''),
#              x = x_lab, y = y_lab))
# return(results=list('data'=plot_data))
plot(time_cont * max(time), Mu_functions * sigma_y + mu_y,
type="n", lwd = 2,
xlab='Time', ylab='FPC Scores',
font.lab = 2, cex.lab = 1.2,
ylim = c(ymin, ymax))
for (j in 1:groups){
scores_mu_g_temp = mean(data_temp[data_temp[, group_name] == classes[j], fpcs])
lines(time_cont * max(time),
(Mu_functions + FPC_mean[, k] * scores_mu_g_temp) * sigma_y + mu_y,
type = "l", lwd = 3, lty = 1, col = j + 1)
}
# print(ggplot() +
#         geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
#         theme_classic() +
#         labs(title= paste(paste('PC', k, sep = ' '),
#                           ' (', prop_var_avg[k], ' )', sep=''),
#              x = x_lab, y = y_lab))
# return(results=list('data'=plot_data))
plot(time_cont * max(time), Mu_functions * sigma_y + mu_y,
type="n", lwd = 2,
xlab='Time', ylab='FPC Scores',
font.lab = 2, cex.lab = 1.2,
ylim = c(ymin, ymax))
ymin <- floor(min(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) - 0.1 }
ymax <- ceiling(max(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) + 0.1 }
ymax <- ceiling(max(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) + 0.1
ymin <- floor(min(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) - 0.1
# print(ggplot() +
#         geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
#         theme_classic() +
#         labs(title= paste(paste('PC', k, sep = ' '),
#                           ' (', prop_var_avg[k], ' )', sep=''),
#              x = x_lab, y = y_lab))
# return(results=list('data'=plot_data))
plot(time_cont * max(time), Mu_functions * sigma_y + mu_y,
type="n", lwd = 2,
xlab='Time', ylab='FPC Scores',
font.lab = 2, cex.lab = 1.2,
ylim = c(ymin, ymax))
for (j in 1:groups){
scores_mu_g_temp = mean(data_temp[data_temp[, group_name] == classes[j], fpcs])
lines(time_cont * max(time),
(Mu_functions + FPC_mean[, k] * scores_mu_g_temp) * sigma_y + mu_y,
type = "l", lwd = 3, lty = 1, col = j + 1)
}
title(main = paste(paste('PC', k, sep = ' '), ' (', prop_var_avg[k], ' )', sep=''))
legend('bottomright', classes, lty = rep(1, groups), lwd = rep(3, groups),
col = seq(2, groups + 1), bty = 'n', cex = 0.5)
fpc_on_mean_curve_data <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 1, original = T, sd = F)
fpc_on_mean_curve_data <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 1, original = T, sd = F)
devtools::load_all(".")
devtools::load_all(".")
plot_posterior_diagnostic(sfpca_data = dat, model = optimal_model)
fpc_on_mean_curve_data <- plot_fpc_on_mean_curve(output = model_output, pc_idx = 1, original = T, sd = F)
loo_best <- model$looic
pkdf <- data.frame(pk = loo_best$diagnostics$pareto_k,
id = unique(sfpca_data$data$ID),
xaxis = 1:length(unique(sfpca_data$data$ID)))
print(ggplot2::ggplot(pkdf, aes(x = xaxis,y = pk)) +
geom_text(data=subset(pkdf, pk > 0.7),
aes(x = xaxis,y = pk, label = xaxis),
vjust = -0.5, size = 3) +
geom_point(shape = 3, color = "blue") +
labs(x = "Observation left out", y = "Pareto shape k") +
geom_hline(yintercept = 0.7, linetype = 2, color = "red", size = 0.2) +
ggtitle("PSIS-LOO diagnostics") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")))
bad <- pkdf[pkdf$pk > 0.7, ]
if (nrow(bad) != 0){
print(paste('Warning: observation ', bad$xaxis,
' (subject ID ', bad$id,
') has Pareto k-values greater than 0.7 at ',
round(bad$pk, 4), sep = ''))
}
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, size = 2)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, size = 1)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, size = 0.5)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, lwd = 2)) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable),
lwd = 2) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable),
lwd = 1.5) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
pc_idx=1
data <- output$df
K <- output$rotation$npcs
if (original == TRUE){
response <- data$response_ori
time <- data$time_ori
} else {
response <- data$response
time <- data$time
if (all(data$response == data$response_ori) &
all(data$time == data$time_ori)){
print('Warning: Response and time are not transformed.
Plot with original values')
}
}
sigma_y <- sd(response)
mu_y <- mean(response)
time_cont <- output$basis$time_cont
Y_sparse <- output$Y_sparse
Mu_functions <- output$Mu_functions
time_sparse <- output$time_sparse
FPC_mean <- output$FPC_mean
prop_var_avg <- output$rotation$prop_var_avg
if (is.null(ymin)) {
ymin <- floor(min(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) - 0.1 }
if (is.null(ymax)) {
ymax <- ceiling(max(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) + 0.1 }
if (is.null(x_lab)) x_lab = 'time'
if (is.null(y_lab)) y_lab = 'response'
k <- pc_idx
fpcs <- paste('fpc', k, sep = '')
data_temp <- data[, c('ID', group_name, fpcs)]
classes <- levels(data_temp[, group_name])
groups <- length(classes)
scores_mu_g <- unlist(lapply(1:groups, function(x){
mean(data_temp[data_temp[, group_name] == classes[x], fpcs])
}))
plot_data <- data.frame(time_cont * max(time))
colnames(plot_data) <- 'time'
for (j in 1:groups){
plot_data[, 1 + j] <- (Mu_functions + FPC_mean[, k] * scores_mu_g[j]) *
sigma_y + mu_y
colnames(plot_data)[1 + j] <- classes[j]
}
plot_melt <- reshape::melt(plot_data, time, classes)
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value, color = variable),
lwd = 1.5) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, linetype = variable),
lwd = 1.5) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, linetype = variable),
lwd = 1.5) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
devtools::load_all(".")
plot_fpc_group_mean(model_output, pc_idx = 1, original = T, 'delivery')
plot_fpc_group_mean(model_output, pc_idx = 1, original = T, 'delivery')
View(model_output)
group_name = 'delivery'
data <- output$df
K <- output$rotation$npcs
if (original == TRUE){
response <- data$response_ori
time <- data$time_ori
} else {
response <- data$response
time <- data$time
if (all(data$response == data$response_ori) &
all(data$time == data$time_ori)){
print('Warning: Response and time are not transformed.
Plot with original values')
}
}
sigma_y <- sd(response)
mu_y <- mean(response)
time_cont <- output$basis$time_cont
Y_sparse <- output$Y_sparse
Mu_functions <- output$Mu_functions
time_sparse <- output$time_sparse
FPC_mean <- output$FPC_mean
prop_var_avg <- output$rotation$prop_var_avg
if (is.null(ymin)) {
ymin <- floor(min(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) - 0.1 }
if (is.null(ymax)) {
ymax <- ceiling(max(unlist(Y_sparse) * sigma_y + mu_y,
Mu_functions * sigma_y + mu_y)) + 0.1 }
if (is.null(x_lab)) x_lab = 'time'
if (is.null(y_lab)) y_lab = 'response'
k <- pc_idx
fpcs <- paste('fpc', k, sep = '')
data_temp <- data[, c('ID', group_name, fpcs)]
classes <- levels(data_temp[, group_name])
groups <- length(classes)
scores_mu_g <- unlist(lapply(1:groups, function(x){
mean(data_temp[data_temp[, group_name] == classes[x], fpcs])
}))
plot_data <- data.frame(time_cont * max(time))
colnames(plot_data) <- 'time'
for (j in 1:groups){
plot_data[, 1 + j] <- (Mu_functions + FPC_mean[, k] * scores_mu_g[j]) *
sigma_y + mu_y
colnames(plot_data)[1 + j] <- classes[j]
}
plot_melt <- reshape::melt(plot_data, time, classes)
print(ggplot() +
geom_line(data=plot_melt, aes(x = time, y = value,
color = variable, linetype = variable),
lwd = 1.5) +
ylim(ymin, ymax) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"),
axis.text.x = element_text(size = 10, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")) +
labs(title= paste(paste('PC', k, sep = ' '),
' (', prop_var_avg[k], ' )', sep=''),
x = x_lab, y = y_lab))
